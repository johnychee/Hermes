@using System.Collections
@using TestWebApp.Models
@using PagedList;
@using PagedList.Mvc;
@{
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div class="panel panel-inverse">

    <div class="panel-heading">
        <div class="panel-heading-btn">
            <a href="javascript:;" class="btn btn-xs btn-icon btn-circle btn-default" data-click="panel-expand"><i class="fa fa-expand"></i></a>
        </div>
        <h4 class="panel-title">Notifications</h4>
    </div>
    <div class="panel-body">
        <div class="table-responsive">

            <table class="table table-hover">
                <thead>
                    <tr>
                        <th></th>
                        <th>Subject</th>
                        <th>Description</th>
                        <th>When</th>
                        <th>Triggered by</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (Notification notification in (IPagedList<Notification>)ViewBag.Notifications)
                    {
                        <tr>
                            <td>
                                @if (notification.NotificationsType.Name == NotificationType.SLA.ToString())
                                {
                                    <span class="fa-stack fa-2x text-danger">
                                        <i class="fa fa-circle fa-stack-2x"></i>
                                        <i class="fa fa-bolt fa-stack-1x fa-inverse"></i>
                                    </span>
                                }
                                else if (notification.NotificationsType.Name == NotificationType.Emailing.ToString())
                                {
                                    <span class="fa-stack fa-2x text-warning">
                                        <i class="fa fa-circle fa-stack-2x"></i>
                                        <i class="fa fa-envelope fa-stack-1x fa-inverse"></i>
                                    </span>
                                }
                                else if (notification.NotificationsType.Name == NotificationType.System.ToString())
                                {
                                    <span class="fa-stack fa-2x text-primary">
                                        <i class="fa fa-circle fa-stack-2x"></i>
                                        <i class="fa fa-info fa-stack-1x fa-inverse"></i>
                                    </span>
                                }
                                else if (notification.NotificationsType.Name == NotificationType.TicketFlow.ToString())
                                {

                                    <span class="fa-stack fa-2x text-success">
                                        <i class="fa fa-circle fa-stack-2x"></i>
                                        <i class="fa fa-flag fa-stack-1x fa-inverse"></i>
                                    </span>
                                }
                            </td>
                            <td>@Html.ActionLink(@notification.Subject, "Details/" + notification.TicketId, "Ticket", null, new { target="_blank"})</td>
                            <td>@notification.Description</td>
                            @if ((DateTime.UtcNow - notification.CreatedAt).Minutes < 1)
                            {
                                <td class="text-muted">few seconds ago</td>
                            }
                            else if ((DateTime.UtcNow - notification.CreatedAt).Hours < 1)
                            {
                                if ((DateTime.UtcNow - notification.CreatedAt).Minutes > 1)
                                {
                                    <td class="text-muted">@String.Format("{0} minutes ago", (DateTime.Now - notification.CreatedAt).Minutes)</td>
                                }
                                else
                                {
                                    <td class="text-muted">@String.Format("{0} minute ago", (DateTime.Now - notification.CreatedAt).Minutes)</td>
                                }
                            }
                            else if ((DateTime.UtcNow - notification.CreatedAt).Days < 1)
                            {
                                if ((DateTime.UtcNow - notification.CreatedAt).Hours > 1)
                                {
                                    <td class="text-muted">@String.Format("{0} hours ago", (DateTime.Now - notification.CreatedAt).Hours)</td>
                                }
                                else
                                {
                                    <td class="text-muted">@String.Format("{0} hour ago", (DateTime.Now - notification.CreatedAt).Hours)</td>
                                }
                            }
                            else
                            {
                                if ((DateTime.UtcNow - notification.CreatedAt).Days >= 1)
                                {
                                    <td class="text-muted">@String.Format("{0} days ago", (DateTime.Now - notification.CreatedAt).Days)</td>
                                }
                                else
                                {
                                    <td class="text-muted">@String.Format("{0} day ago", (DateTime.Now - notification.CreatedAt).Days)</td>
                                }
                            }
                            @if (notification.Creator.webpages_Roles.First().RoleName != "System")
                            {
                                <td>@Html.ActionLink(notification.Creator.username, "Details/" + notification.CreatorId, "User", null, new { target = "_blank" })</td>
                            }
                            else
                            {
                                <td>System</td>
                            }
                        </tr>
                    }
                </tbody>
            </table>
        </div>
            @Html.PagedListPager((IPagedList<Notification>)ViewBag.Notifications, page => Url.Action("Index/", new { page }))


        </div>

</div>
